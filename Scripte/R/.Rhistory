}
return(dice)
}
GetDistributionDoubleDice = function(dice,fields,oneisBlank){
d1 = dice[1:20]
d2 = dice[21:40]
d1_long = NULL
d2_long = NULL
DiceChanges = rep(0, fields*2)
for (i in 1:20){
d1_long = c(d1_long,rep(d1[i], 20))
d2_long = c(d2_long,d2)
}
#can Loop
for (d in 1:fields){
DiceChanges[d] = sum(d1_long==d  | d2_long==d)
}
#Must loop
for (d in 1:fields){
DiceChanges[d+5] = sum(d1_long == d2_long & (d1_long==d  & d2_long==d))
if(oneisBlank){
DiceChanges[d+5] = DiceChanges[d+5] + sum((d1_long==d  & d2_long==1) | (d1_long==1  & d2_long==d))
}
}
return(DiceChanges / 4)
}
CreatePopulation = function(partendice,fields,population,MutationNumber,DiceSize,oneisBlank){
diceDomograic = matrix(NA, nrow = population, ncol = fields*2)
DistList = list()
for (i in 1:population){
childDice = MutateDice(partendice,fields, MutationNumber, DiceSize)
DistList[[i]] = childDice
diceDomograic[i,] = GetDistributionDoubleDice(dice = childDice,fields,oneisBlank)
}
DistList[["diceDomograic"]] = diceDomograic
return(DistList)
}
Condition_FixPercentage = function(generation,percent,objective){
EmptyLossList = rep(0, dim(generation[["diceDomograic"]])[1])
return(EmptyLossList + abs(generation[["diceDomograic"]][,objective] - percent))
}
Condition_InbetweenPercentage = function(generation,lowerPercent,upperPercent,objective){
EmptyLossList = rep(0, dim(generation[["diceDomograic"]])[1])
lowerCon = generation[["diceDomograic"]][,objective] - lowerPercent
upperCon = upperPercent -generation[["diceDomograic"]][,objective]
lowerCon[lowerCon>0] = 0
upperCon[upperCon>0] = 0
return(EmptyLossList + abs(pmin(lowerCon,upperCon)))
}
Condition_MustOccureFixPercent = function(generation,percent,objective){
EmptyLossList = rep(0, dim(generation[["diceDomograic"]])[1])
return(EmptyLossList + abs(generation[["diceDomograic"]][,objective+dim(generation[["diceDomograic"]])[2]/2] - percent))
}
Condition_FixPercentage2conditions = function(generation,percent,objective1,objective2){
EmptyLossList = rep(0, dim(generation[["diceDomograic"]])[1])
return(EmptyLossList + abs((generation[["diceDomograic"]][,objective1] + generation[["diceDomograic"]][,objective2]) - percent))
}
Condition_InbetweenPercentage2conditions = function(generation,lowerPercent,upperPercent,objective1,objective2){
EmptyLossList = rep(0, dim(generation[["diceDomograic"]])[1])
lowerCon = (generation[["diceDomograic"]][,objective1]+generation[["diceDomograic"]][,objective2]) - lowerPercent
upperCon = upperPercent - (generation[["diceDomograic"]][,objective1]+generation[["diceDomograic"]][,objective2])
lowerCon[lowerCon>0] = 0
upperCon[upperCon>0] = 0
return(EmptyLossList + abs(pmin(lowerCon,upperCon)))
}
Condition_IsOppositeTo = function(generation,objective1,objective2){
EmptyLossList = rep(0, dim(generation[["diceDomograic"]])[1])
for (i in 1:dim(generation[["diceDomograic"]])[1]){
EmptyLossList[i] = abs(sum(generation[[i]][1:20] == objective1) - sum(generation[[i]][21:40] == objective2)) +
abs(sum(generation[[i]][21:40] == objective1) - sum(generation[[i]][1:20] == objective2))
}
return(EmptyLossList)
}
Condition_minimiseZeros = function(generation){
EmptyLossList = rep(0, dim(generation[["diceDomograic"]])[1])
for (i in 1:dim(generation[["diceDomograic"]])[1]){
EmptyLossList[i] = sum(generation[[i]] == 0) * 10000
}
return(EmptyLossList)
}
#Is opposite
#Is not opposite
#must occure x percent
#rbind(DiceChanges,DiceChanges)
Blank = 1
Monster = 2
Duell = 3
Spell = 4
Quest = 5
#Condition_FixPercentage
#Condition_InbetweenPercentage
#Condition_MustOccureFixPercent
#Condition_FixPercentage2conditions
#Condition_InbetweenPercentage2conditions
#Condition_IsOppositeTo
#For loop
ParentDice = rep(0, 40)
population = 1000
fields = 5
MutationNumber = 10
DiceSize = 40
oneisBlank = TRUE
Blank = 1
Monster = 2
Duell = 3
Spell = 4
Quest = 5
counter = 0
BestLoss = Inf
while (TRUE) {
lossList = rep(0,population)
generation = CreatePopulation(ParentDice,fields,population,MutationNumber,DiceSize,oneisBlank)
#Conditions
#1 Monster + Duell <66%
#2 Monster + Duell >40%
#3 Duell = 30-50%
#4 Quest >30 - 50%
#5 Spell >40 - 60
#6 Monster = 45%
#7 Quest oppsite to Monster
#8 Quest must 7%
#9 Blankmust = 0%
#10 Monster Must = 5%
#1 Monster 45-55%
#2 Duell 35%
#3 Zauberkarte opposing Zauber
#4 Aktion oppsign aktion
#1
lossList = lossList + Condition_FixPercentage(generation = generation,percent = 100,objective = Monster)
lossList = lossList + Condition_FixPercentage(generation = generation,percent = 100,objective = Duell)
#2
#lossList = lossList + Condition_FixPercentage(generation = generation,
#                                              percent = 35,
#                                             objective = Duell)
#3
#lossList = lossList + Condition_IsOppositeTo(generation = generation, objective1 = Spell, objective2 = Spell)
#4
#lossList = lossList + Condition_IsOppositeTo(generation = generation, objective1 = Quest, objective2 = Quest)
#lossList = lossList + Condition_MustOccureFixPercent(generation = generation,
#                                                    percent = 0,
#                                                    objective = Blank)
#lossList = lossList + Condition_minimiseZeros(generation = generation)
"
#1,2
lossList = lossList + Condition_InbetweenPercentage2conditions(generation = generation,
lowerPercent = 40,
upperPercent = 66,
objective1 = Monster,
objective2 = Duell)
#3
lossList = lossList + Condition_InbetweenPercentage(generation = generation,
lowerPercent = 30,
upperPercent = 50,
objective = Duell)
#4
lossList = lossList + Condition_InbetweenPercentage(generation = generation,
lowerPercent = 30,
upperPercent = 50,
objective = Quest)
#5
lossList = lossList + Condition_InbetweenPercentage(generation = generation,
lowerPercent = 40,
upperPercent = 60,
objective = Spell)
#6
lossList = lossList + Condition_FixPercentage(generation = generation,
percent = 47,
objective = Monster)
#7
lossList = lossList + Condition_IsOppositeTo(generation = generation,
objective1 = Monster,
objective2 = Quest)
#8
lossList = lossList + Condition_MustOccureFixPercent(generation = generation,
percent = 7,
objective = Quest)
#9
lossList = lossList + Condition_MustOccureFixPercent(generation = generation,
percent = 0,
objective = Blank)
#11
lossList = lossList + Condition_MustOccureFixPercent(generation = generation,
percent = 5,
objective = Monster)
#11
lossList = lossList + Condition_minimiseZeros(generation = generation)
"
#print(min(lossList))
if (min(lossList) < BestLoss){
ParentDice = generation[[order(lossList)[1]]]
BestLoss = min(lossList)
cat("Current best loss:",BestLoss,"\n")
counter = 0
}else{
counter = counter+1
if(counter >= 100){
cat("Dice converged!")
break
}
}
}
#install.packages("stringr")
library(stringr)
roundTopointfive <- function(x) {
return(floor(x) + round((x - floor(x)) * 2,digits = 0) / 2)
}
#create Matix
GewinnVerlustMatrix = matrix(NA,nrow = 10, ncol = 10)
colnames(GewinnVerlustMatrix) = str_split_1(toString(0:9), ", ")
rownames(GewinnVerlustMatrix)  =str_split_1(toString(0:-9), ", ")
for (gw in 0:9){
for (vl in 0:9){
#gw = 7
#vl = 6
baseCoefficent = 2/((10-gw)/20)
gwChange = ((10-gw+vl)/20)
gwCoefficent = gwChange * baseCoefficent
gwValue = gwCoefficent / gwChange
vlchange = 1-gwChange
surplus = gwCoefficent-2
vlValue =  surplus/vlchange
vlCoefficent = vlValue * vlchange
round((gwCoefficent - vlCoefficent),digits = 5) == 2
GewinnVerlustMatrix[gw+1,vl+1] = paste(toString(roundTopointfive(gwValue)),"-",roundTopointfive(vlValue),sep = "")
#cat("\nGewinn =",gwValue,"\nVerlust =",vlValue)
}
}
paste(toString(roundTopointfive(gwValue)),"-",roundTopointfive(vlValue),sep = "")
write.csv(GewinnVerlustMatrix, "V:/Brettspiele/Timgammen_aktuell/Scripte/R/AkMatrix.csv")
vlValue
#install.packages("stringr")
library(stringr)
roundTopointfive <- function(x) {
return(floor(x) + round((x - floor(x)) * 2,digits = 0) / 2)
}
#create Matix
GewinnVerlustMatrix = matrix(NA,nrow = 10, ncol = 10)
colnames(GewinnVerlustMatrix) = str_split_1(toString(0:9), ", ")
rownames(GewinnVerlustMatrix)  =str_split_1(toString(0:-9), ", ")
for (gw in 0:9){
for (vl in 0:9){
#gw = 7
#vl = 6
baseCoefficent = 2/((10-gw)/20)
gwChange = ((10-gw+vl)/20)
gwCoefficent = gwChange * baseCoefficent
gwValue = gwCoefficent / gwChange
vlchange = 1-gwChange
surplus = gwCoefficent-2
vlValue =  surplus/vlchange
vlCoefficent = vlValue * vlchange
round((gwCoefficent - vlCoefficent),digits = 5) == 2
GewinnVerlustMatrix[gw+1,vl+1] = paste(toString(roundTopointfive(gwValue)),"-",round(vlValue,digits = 2),sep = "")
#cat("\nGewinn =",gwValue,"\nVerlust =",vlValue)
}
}
paste(toString(roundTopointfive(gwValue)),"-",roundTopointfive(vlValue),sep = "")
write.csv(GewinnVerlustMatrix, "V:/Brettspiele/Timgammen_aktuell/Scripte/R/AkMatrix.csv")
#install.packages("stringr")
library(stringr)
roundTopointfive <- function(x) {
return(floor(x) + round((x - floor(x)) * 2,digits = 0) / 2)
}
#create Matix
GewinnVerlustMatrix = matrix(NA,nrow = 10, ncol = 10)
colnames(GewinnVerlustMatrix) = str_split_1(toString(0:9), ", ")
rownames(GewinnVerlustMatrix)  =str_split_1(toString(0:-9), ", ")
for (gw in 0:9){
for (vl in 0:9){
#gw = 7
#vl = 6
baseCoefficent = 2/((10-gw)/20)
gwChange = ((10-gw+vl)/20)
gwCoefficent = gwChange * baseCoefficent
gwValue = gwCoefficent / gwChange
vlchange = 1-gwChange
surplus = gwCoefficent-2
vlValue =  surplus/vlchange
vlCoefficent = vlValue * vlchange
round((gwCoefficent - vlCoefficent),digits = 5) == 2
GewinnVerlustMatrix[gw+1,vl+1] = paste(toString(roundTopointfive(gwValue)),"-",round(vlValue,digits = 2),sep = "")
#cat("\nGewinn =",gwValue,"\nVerlust =",vlValue)
}
}
paste(toString(roundTopointfive(gwValue)),"-",roundTopointfive(vlValue),sep = "")
write.csv(GewinnVerlustMatrix, "V:/Brettspiele/Timgammen_aktuell/Scripte/R/AkMatrix.csv")
#install.packages("stringr")
library(stringr)
roundTopointfive <- function(x) {
return(floor(x) + round((x - floor(x)) * 2,digits = 0) / 2)
}
#create Matix
GewinnVerlustMatrix = matrix(NA,nrow = 10, ncol = 10)
colnames(GewinnVerlustMatrix) = str_split_1(toString(0:9), ", ")
rownames(GewinnVerlustMatrix)  =str_split_1(toString(0:-9), ", ")
for (gw in 0:9){
for (vl in 0:9){
#gw = 7
#vl = 6
baseCoefficent = 2/((10-gw)/20)
gwChange = ((10-gw+vl)/20)
gwCoefficent = gwChange * baseCoefficent
gwValue = gwCoefficent / gwChange
vlchange = 1-gwChange
surplus = gwCoefficent-2
vlValue =  surplus/vlchange
vlCoefficent = vlValue * vlchange
round((gwCoefficent - vlCoefficent),digits = 5) == 2
GewinnVerlustMatrix[gw+1,vl+1] = paste(toString(roundTopointfive(gwValue)),"-",round(vlValue,digits = 2),sep = "")
#cat("\nGewinn =",gwValue,"\nVerlust =",vlValue)
}
}
paste(toString(roundTopointfive(gwValue)),"-",roundTopointfive(vlValue),sep = "")
//write.csv(GewinnVerlustMatrix, "V:/Brettspiele/Timgammen_aktuell/Scripte/R/AkMatrix.csv")
View(GewinnVerlustMatrix)
###
Faktor = 2.8
Base = 1.4
Length = 31
diff =  Base - log(Faktor)*Faktor
out = matrix(NA, nrow = Length-2, ncol = 2)
for (i in 3:Length){
out[(i-2),2] = round(log(i)*Faktor + diff,digits = 1)
}
out[,1] = seq(from = 3, to = Length, by =1)
print(out)
verteilung = c(12,16,4,7,7,3,5,9,6,8,31,11,10,30,4,5,14,20,21,3,16,7,8,14,22)
plot(sort(verteilung))
#D20 stats
numbers = NULL
for (i in 1:10000){
numbers = c(numbers,max(sample.int(20, size = 2, replace = TRUE)))
}
hist(numbers,breaks=24)
#print(mean(numbers))
numbers = NULL
for (i in 1:10000){
numbers = c(numbers,max(sample.int(20, size =10, replace = TRUE)))
}
hist(numbers,breaks=20)
#install.packages("ggplot2")
library("ggplot2")
###
Faktor = 2.8
Base = 1.4
Length = 31
diff =  Base - log(Faktor)*Faktor
out = matrix(NA, nrow = Length-2, ncol = 2)
for (i in 3:Length){
out[(i-2),2] = round(log(i)*Faktor + diff,digits = 1)
}
out[,1] = seq(from = 3, to = Length, by =1)
print(out)
verteilung = c(12,16,4,7,7,3,5,9,6,8,31,11,10,30,4,5,14,20,21,3,16,7,8,14,22)
plot(sort(verteilung))
#D20 stats
numbers = NULL
for (i in 1:10000){
numbers = c(numbers,max(sample.int(20, size = 2, replace = TRUE)))
}
hist(numbers,breaks=24)
#print(mean(numbers))
numbers = NULL
for (i in 1:10000){
numbers = c(numbers,max(sample.int(20, size =10, replace = TRUE)))
}
hist(numbers,breaks=20)
#install.packages("ggplot2")
library("ggplot2")
###
Faktor = 2.8
Base = 1.4
Length = 31
diff =  Base - log(Faktor)*Faktor
out = matrix(NA, nrow = Length-2, ncol = 2)
for (i in 3:Length){
out[(i-2),2] = round(log(i)*Faktor + diff,digits = 1)
}
out[,1] = seq(from = 3, to = Length, by =1)
print(out)
verteilung = c(12,16,4,7,7,3,5,9,6,8,31,11,10,30,4,5,14,20,21,3,16,7,8,14,22)
plot(sort(verteilung))
out
###
Faktor = 2.8
Base = 1.4
Length = 31
diff =  Base - log(Faktor)*Faktor
out = matrix(NA, nrow = Length-2, ncol = 2)
for (i in 3:Length){
out[(i-2),2] = round(log(i)*Faktor + diff,digits = 1)
}
out[,1] = seq(from = 3, to = Length, by =1)
print(out)
###
Faktor = 2.8
Base = 1.4
Length = 30
out = matrix(NA, nrow = Length-2, ncol = 2)
for (i in 3:Length){
out[(i-2),2] = (i/3) + 4/3
}
print(out)
out = matrix(NA, nrow = Length-2, ncol = 2)
for (i in 3:Length){
out[(i-2),2] = (i/3) + 4/3
}
out[,1] = seq(from = 3, to = Length, by =1)
print(out)
Length = 32
out = matrix(NA, nrow = Length-2, ncol = 2)
for (i in 3:Length){
out[(i-2),2] = (i/3) + 4/3
}
out[,1] = seq(from = 3, to = Length, by =1)
print(out)
#new Formula
Length = 30
out = matrix(NA, nrow = Length-2, ncol = 2)
for (i in 3:Length){
out[(i-2),2] = (i/3) + 4/3
}
out[,1] = seq(from = 3, to = Length, by =1)
print(out)
2+3
(2*4) (-1*(2/3))
(2*4)+(-1*(2/3))
(2*4)+(*4-1*(2/3))
(2*4)+(4*-1*(2/3))
(2*4)+(4*-1*(2/3)) + 4/3
(2*4)+(4*-1*(2/3)) + 4/3 +1
#new Formula
Length = 30
out = matrix(NA, nrow = Length-2, ncol = 2)
for (i in 3:Length){
out[(i-2),2] = (i/3) + 4/3
}
out[,1] = seq(from = 3, to = Length, by =1)
print(out)
5 - 8/3
2 + 2/3 + 4 + 2/3 - 2 - 2/3
3 + 2/3 + 4 + 2/3 - 2 - 1/3
2 + 4/3 + 4 + 2/3 - 2 - 1/3
6/3
6/3 + 4/3
6/3 + 4/3 + 2
#new Formula
Length = 30
out = matrix(NA, nrow = Length-2, ncol = 2)
for (i in 3:Length){
out[(i-2),2] = (i/3) + 4/3
}
out[,1] = seq(from = 3, to = Length, by =1)
print(out)
+2 - 4 - 2/3 - 4/3
+2 - 6 - 3/3 - 4/3
- 6 - 3/3 - 4/3
+2 - 6 - 3/3 - 4/3
6.333333 + 7.333333
6.333333 + 7
#new Formula
Length = 30
out = matrix(NA, nrow = Length-2, ncol = 2)
for (i in 3:Length){
out[(i-2),2] = (i/3) + 4/3
}
out[,1] = seq(from = 3, to = Length, by =1)
print(out)
1.06-3.5
1.5-3.5
10.5-3.5
10.5-3.5 + 2 + 4/3
10.5-3.5 + 1 + 6/3
22+4
-2 + 2/3
-2 - 2/3
-2 - 2/3 + 2 + 2
-2 - 2/3 + 2 + 2 + 2/3
-2 - 2/3 + 2 + 2 + 4/3
8.666667 - 2.666667
Length = 33
out = matrix(NA, nrow = Length-2, ncol = 2)
for (i in 3:Length){
out[(i-2),2] = (i/3) + 4/3
}
out[,1] = seq(from = 3, to = Length, by =1)
print(out)
#new Formula
Length = 33
out = matrix(NA, nrow = Length-2, ncol = 2)
for (i in 3:Length){
out[(i-2),2] = (i/3) + 4/3
}
out[,1] = seq(from = 3, to = Length, by =1)
print(out)
#print(out)
#new Formula
Length = 33
out = matrix(NA, nrow = Length-2, ncol = 2)
for (i in 3:Length){
out[(i-2),2] = (i/3) + 4/3
}
out[,1] = seq(from = 3, to = Length, by =1)
print(out)
-2-2 -2/3
-2-2 -2/3 +2/3
-2-2 -2/3 +2/3 + 16
4/3
5 + 6/3
5 + 6/3 + 5
10 - 3.5
6 + 1/3 + 4
