rm(list = ls())
cat("\014")
#install.packages("png")
#install.packages("abind")
library(png)
library(abind)
importPath = "V:/Brettspiele/Timgammen_aktuell/Scripte/WhiteToPng/input/"
exportPath = "V:/Brettspiele/Timgammen_aktuell/Scripte/WhiteToPng/output/"
allrawCards = list.files(importPath)
for (i in 1:length(allrawCards)){
ImportImage = readPNG(paste(importPath,allrawCards[i],sep=""))
transparentLayer = matrix(1, nrow = dim(ImportImage)[1], ncol = dim(ImportImage)[2])
for (row in 1:dim(transparentLayer)[1]){
for (colum in 1:dim(transparentLayer)[2]){
transparentLayer[row,colum] = 1 - sum(ImportImage[row,colum,1:3])/3
}
}
if (dim(ImportImage)[3] == 4){
ImportImage[,,4] = transparentLayer
TransImage = ImportImage[,,4]
}else{
TransImage = abind(ImportImage, transparentLayer, along = 3)
}
writePNG(TransImage,paste(exportPath,allrawCards[i],sep=""))
print(paste(i, "/", length(allrawCards)))
#Transparence is a value between 0 and 1.
#o <- tranparent
#1 <- NON transparent
#for the other values
#0 <- black
#1 <- white
}
i=2
ImportImage = readPNG(paste(importPath,allrawCards[i],sep=""))
transparentLayer = matrix(1, nrow = dim(ImportImage)[1], ncol = dim(ImportImage)[2])
i
dim(ImportImage)
ImportImage[1,1,1]
ImportImage[1,1,4]
transparentLayer = matrix(1, nrow = dim(ImportImage)[1], ncol = dim(ImportImage)[2])
for (row in 1:dim(transparentLayer)[1]){
for (colum in 1:dim(transparentLayer)[2]){
transparentLayer[row,colum] = 1 - sum(ImportImage[row,colum,1:3])/3
}
}
View(transparentLayer)
(dim(ImportImage)[3] == 4)
ImportImage[,,4]
ImportImage[,,4] == 1
sum(ImportImage[,,4] == 1)
sum(ImportImage[,,4] != 1)
which(ImportImage[,,4] != 1)
ImportImage[which(ImportImage[,,4] != 1)]
ImportImage[,,4] = transparentLayer
TransImage = ImportImage[,,4]
TransImage
writePNG(TransImage,paste(exportPath,allrawCards[i],sep=""))
ImportImage = readPNG(paste(importPath,allrawCards[i],sep=""))
transparentLayer = matrix(1, nrow = dim(ImportImage)[1], ncol = dim(ImportImage)[2])
for (row in 1:dim(transparentLayer)[1]){
for (colum in 1:dim(transparentLayer)[2]){
transparentLayer[row,colum] = 1 - sum(ImportImage[row,colum,1:3])/3
}
}
writePNG(TransImage,paste(exportPath,allrawCards[i],sep=""))
ImportImage = readPNG(paste(importPath,allrawCards[i],sep=""))
transparentLayer = matrix(1, nrow = dim(ImportImage)[1], ncol = dim(ImportImage)[2])
ImportImage = readPNG(paste(importPath,allrawCards[i],sep=""))
transparentLayer = matrix(1, nrow = dim(ImportImage)[1], ncol = dim(ImportImage)[2])
for (row in 1:dim(transparentLayer)[1]){
for (colum in 1:dim(transparentLayer)[2]){
transparentLayer[row,colum] = 1 - sum(ImportImage[row,colum,1:3])/3
}
}
if (dim(ImportImage)[3] == 4){
ImportImage[,,4] = transparentLayer
TransImage = ImportImage
}else{
TransImage = abind(ImportImage, transparentLayer, along = 3)
}
writePNG(TransImage,paste(exportPath,allrawCards[i],sep=""))
print(paste(i, "/", length(allrawCards)))
### reset
rm(list = ls())
cat("\014")
#install.packages("png")
#install.packages("abind")
library(png)
library(abind)
importPath = "V:/Brettspiele/Timgammen_aktuell/Scripte/WhiteToPng/input/"
exportPath = "V:/Brettspiele/Timgammen_aktuell/Scripte/WhiteToPng/output/"
allrawCards = list.files(importPath)
for (i in 1:length(allrawCards)){
ImportImage = readPNG(paste(importPath,allrawCards[i],sep=""))
transparentLayer = matrix(1, nrow = dim(ImportImage)[1], ncol = dim(ImportImage)[2])
for (row in 1:dim(transparentLayer)[1]){
for (colum in 1:dim(transparentLayer)[2]){
transparentLayer[row,colum] = 1 - sum(ImportImage[row,colum,1:3])/3
}
}
if (dim(ImportImage)[3] == 4){
ImportImage[,,4] = transparentLayer
TransImage = ImportImage
}else{
TransImage = abind(ImportImage, transparentLayer, along = 3)
}
writePNG(TransImage,paste(exportPath,allrawCards[i],sep=""))
print(paste(i, "/", length(allrawCards)))
#Transparence is a value between 0 and 1.
#o <- tranparent
#1 <- NON transparent
#for the other values
#0 <- black
#1 <- white
}
# png(paste(importPath,allrawCards[i],sep=""))
### reset
rm(list = ls())
cat("\014")
#install.packages("png")
#install.packages("abind")
library(png)
library(abind)
importPath = "V:/Brettspiele/Timgammen_aktuell/Scripte/WhiteToPng/input/"
exportPath = "V:/Brettspiele/Timgammen_aktuell/Scripte/WhiteToPng/output/"
allrawCards = list.files(importPath)
for (i in 1:length(allrawCards)){
ImportImage = readPNG(paste(importPath,allrawCards[i],sep=""))
'
transparentLayer = matrix(1, nrow = dim(ImportImage)[1], ncol = dim(ImportImage)[2])
for (row in 1:dim(transparentLayer)[1]){
for (colum in 1:dim(transparentLayer)[2]){
transparentLayer[row,colum] = 1 - sum(ImportImage[row,colum,1:3])/3
}
}
'
transparentLayer = 1 - ((ImportImage[,,1] + ImportImage[,,2] + ImportImage[,,3]) / 3)
if (dim(ImportImage)[3] == 4){
ImportImage[,,4] = transparentLayer
TransImage = ImportImage
}else{
TransImage = abind(ImportImage, transparentLayer, along = 3)
}
writePNG(TransImage,paste(exportPath,allrawCards[i],sep=""))
print(paste(i, "/", length(allrawCards)))
#Transparence is a value between 0 and 1.
#o <- tranparent
#1 <- NON transparent
#for the other values
#0 <- black
#1 <- white
}
# png(paste(importPath,allrawCards[i],sep=""))
### reset
rm(list = ls())
cat("\014")
#install.packages("png")
#install.packages("abind")
library(png)
library(abind)
importPath = "V:/Brettspiele/Timgammen_aktuell/Scripte/WhiteToPng/input/"
exportPath = "V:/Brettspiele/Timgammen_aktuell/Scripte/WhiteToPng/output/"
allrawCards = list.files(importPath)
for (i in 1:length(allrawCards)){
ImportImage = readPNG(paste(importPath,allrawCards[i],sep=""))
'
transparentLayer = matrix(1, nrow = dim(ImportImage)[1], ncol = dim(ImportImage)[2])
for (row in 1:dim(transparentLayer)[1]){
for (colum in 1:dim(transparentLayer)[2]){
transparentLayer[row,colum] = 1 - sum(ImportImage[row,colum,1:3])/3
}
}
'
transparentLayer = 1 - ((ImportImage[,,1] + ImportImage[,,2] + ImportImage[,,3]) / 3)
if (dim(ImportImage)[3] == 4){
ImportImage[,,4] = transparentLayer
TransImage = ImportImage
}else{
TransImage = abind(ImportImage, transparentLayer, along = 3)
}
writePNG(TransImage,paste(exportPath,allrawCards[i],sep=""))
print(paste(i, "/", length(allrawCards)))
#Transparence is a value between 0 and 1.
#o <- tranparent
#1 <- NON transparent
#for the other values
#0 <- black
#1 <- white
}
# png(paste(importPath,allrawCards[i],sep=""))
### reset
rm(list = ls())
cat("\014")
#install.packages("png")
#install.packages("abind")
library(png)
library(abind)
importPath = "V:/Brettspiele/Project_Goettergaemmerung/Scripte/WhiteToPng/input/"
exportPath = "V:/Brettspiele/Project_Goettergaemmerung/Scripte/WhiteToPng/output/"
allrawCards = list.files(importPath)
for (i in 1:length(allrawCards)){
ImportImage = readPNG(paste(importPath,allrawCards[i],sep=""))
'
transparentLayer = matrix(1, nrow = dim(ImportImage)[1], ncol = dim(ImportImage)[2])
for (row in 1:dim(transparentLayer)[1]){
for (colum in 1:dim(transparentLayer)[2]){
transparentLayer[row,colum] = 1 - sum(ImportImage[row,colum,1:3])/3
}
}
'
transparentLayer = 1 - ((ImportImage[,,1] + ImportImage[,,2] + ImportImage[,,3]) / 3)
if (dim(ImportImage)[3] == 4){
ImportImage[,,4] = transparentLayer
ImportImage[,,1] = 1
ImportImage[,,2] = 1
ImportImage[,,3] = 1
TransImage = ImportImage
}else{
ImportImage[,,1] = 0
ImportImage[,,2] = 0
ImportImage[,,3] = 0
TransImage = abind(ImportImage, transparentLayer, along = 3)
}
writePNG(TransImage,paste(exportPath,allrawCards[i],sep=""))
print(paste(i, "/", length(allrawCards)))
#Transparence is a value between 0 and 1.
#o <- tranparent
#1 <- NON transparent
#for the other values
#0 <- black
#1 <- white
}
# png(paste(importPath,allrawCards[i],sep=""))
### reset
rm(list = ls())
cat("\014")
#install.packages("png")
#install.packages("abind")
library(png)
library(abind)
importPath = "V:/Brettspiele/Project_Goettergaemmerung/Scripte/WhiteToPng/input/"
exportPath = "V:/Brettspiele/Project_Goettergaemmerung/Scripte/WhiteToPng/output/"
allrawCards = list.files(importPath)
for (i in 1:length(allrawCards)){
ImportImage = readPNG(paste(importPath,allrawCards[i],sep=""))
'
transparentLayer = matrix(1, nrow = dim(ImportImage)[1], ncol = dim(ImportImage)[2])
for (row in 1:dim(transparentLayer)[1]){
for (colum in 1:dim(transparentLayer)[2]){
transparentLayer[row,colum] = 1 - sum(ImportImage[row,colum,1:3])/3
}
}
'
transparentLayer = 1 - ((ImportImage[,,1] + ImportImage[,,2] + ImportImage[,,3]) / 3)
if (dim(ImportImage)[3] == 4){
ImportImage[,,4] = transparentLayer
ImportImage[,,1] = 1
ImportImage[,,2] = 1
ImportImage[,,3] = 1
TransImage = ImportImage
}else{
ImportImage[,,1] = 0
ImportImage[,,2] = 0
ImportImage[,,3] = 0
TransImage = abind(ImportImage, transparentLayer, along = 3)
}
writePNG(TransImage,paste(exportPath,allrawCards[i],sep=""))
print(paste(i, "/", length(allrawCards)))
#Transparence is a value between 0 and 1.
#o <- tranparent
#1 <- NON transparent
#for the other values
#0 <- black
#1 <- white
}
# png(paste(importPath,allrawCards[i],sep=""))
### reset
rm(list = ls())
cat("\014")
#install.packages("png")
#install.packages("abind")
library(png)
library(abind)
importPath = "V:/Brettspiele/Project_Goettergaemmerung/Scripte/WhiteToPng/input/"
exportPath = "V:/Brettspiele/Project_Goettergaemmerung/Scripte/WhiteToPng/output/"
allrawCards = list.files(importPath)
for (i in 1:length(allrawCards)){
ImportImage = readPNG(paste(importPath,allrawCards[i],sep=""))
'
transparentLayer = matrix(1, nrow = dim(ImportImage)[1], ncol = dim(ImportImage)[2])
for (row in 1:dim(transparentLayer)[1]){
for (colum in 1:dim(transparentLayer)[2]){
transparentLayer[row,colum] = 1 - sum(ImportImage[row,colum,1:3])/3
}
}
'
transparentLayer = 1 - ((ImportImage[,,1] + ImportImage[,,2] + ImportImage[,,3]) / 3)
if (dim(ImportImage)[3] == 4){
ImportImage[,,4] = transparentLayer
ImportImage[,,1] = 1
ImportImage[,,2] = 1
ImportImage[,,3] = 1
TransImage = ImportImage
}else{
ImportImage[,,1] = 0
ImportImage[,,2] = 0
ImportImage[,,3] = 0
TransImage = abind(ImportImage, transparentLayer, along = 3)
}
writePNG(TransImage,paste(exportPath,allrawCards[i],sep=""))
print(paste(i, "/", length(allrawCards)))
#Transparence is a value between 0 and 1.
#o <- tranparent
#1 <- NON transparent
#for the other values
#0 <- black
#1 <- white
}
# png(paste(importPath,allrawCards[i],sep=""))
### reset
rm(list = ls())
cat("\014")
#install.packages("png")
#install.packages("abind")
library(png)
library(abind)
importPath = "V:/Brettspiele/Project_Goettergaemmerung/Scripte/WhiteToPng/input/"
exportPath = "V:/Brettspiele/Project_Goettergaemmerung/Scripte/WhiteToPng/output/"
allrawCards = list.files(importPath)
for (i in 1:length(allrawCards)){
ImportImage = readPNG(paste(importPath,allrawCards[i],sep=""))
'
transparentLayer = matrix(1, nrow = dim(ImportImage)[1], ncol = dim(ImportImage)[2])
for (row in 1:dim(transparentLayer)[1]){
for (colum in 1:dim(transparentLayer)[2]){
transparentLayer[row,colum] = 1 - sum(ImportImage[row,colum,1:3])/3
}
}
'
transparentLayer = 1 - ((ImportImage[,,1] + ImportImage[,,2] + ImportImage[,,3]) / 3)
if (dim(ImportImage)[3] == 4){
ImportImage[,,4] = transparentLayer
ImportImage[,,1] = 1
ImportImage[,,2] = 1
ImportImage[,,3] = 1
TransImage = ImportImage
}else{
ImportImage[,,1] = 0
ImportImage[,,2] = 0
ImportImage[,,3] = 0
TransImage = abind(ImportImage, transparentLayer, along = 3)
}
writePNG(TransImage,paste(exportPath,allrawCards[i],sep=""))
print(paste(i, "/", length(allrawCards)))
#Transparence is a value between 0 and 1.
#o <- tranparent
#1 <- NON transparent
#for the other values
#0 <- black
#1 <- white
}
# png(paste(importPath,allrawCards[i],sep=""))
### reset
rm(list = ls())
cat("\014")
#install.packages("png")
#install.packages("abind")
library(png)
library(abind)
importPath = "V:/Brettspiele/Project_Goettergaemmerung/Scripte/WhiteToPng/input/"
exportPath = "V:/Brettspiele/Project_Goettergaemmerung/Scripte/WhiteToPng/output/"
allrawCards = list.files(importPath)
allrawCards
### reset
rm(list = ls())
cat("\014")
#install.packages("png")
#install.packages("abind")
library(png)
library(abind)
importPath = "V:/Brettspiele/Project_Goettergaemmerung/Scripte/WhiteToPng/input/"
exportPath = "V:/Brettspiele/Project_Goettergaemmerung/Scripte/WhiteToPng/output/"
allrawCards = list.files(importPath)
for (i in 1:length(allrawCards)){
ImportImage = readPNG(paste(importPath,allrawCards[i],sep=""))
'
transparentLayer = matrix(1, nrow = dim(ImportImage)[1], ncol = dim(ImportImage)[2])
for (row in 1:dim(transparentLayer)[1]){
for (colum in 1:dim(transparentLayer)[2]){
transparentLayer[row,colum] = 1 - sum(ImportImage[row,colum,1:3])/3
}
}
'
transparentLayer = 1 - ((ImportImage[,,1] + ImportImage[,,2] + ImportImage[,,3]) / 3)
if (dim(ImportImage)[3] == 4){
ImportImage[,,4] = transparentLayer
ImportImage[,,1] = 1
ImportImage[,,2] = 1
ImportImage[,,3] = 1
TransImage = ImportImage
}else{
ImportImage[,,1] = 0
ImportImage[,,2] = 0
ImportImage[,,3] = 0
TransImage = abind(ImportImage, transparentLayer, along = 3)
}
writePNG(TransImage,paste(exportPath,allrawCards[i],sep=""))
print(paste(i, "/", length(allrawCards)))
#Transparence is a value between 0 and 1.
#o <- tranparent
#1 <- NON transparent
#for the other values
#0 <- black
#1 <- white
}
# png(paste(importPath,allrawCards[i],sep=""))
### reset
rm(list = ls())
cat("\014")
#install.packages("png")
#install.packages("abind")
library(png)
library(abind)
importPath = "V:/Brettspiele/Project_Goettergaemmerung/Scripte/WhiteToPng/input/"
exportPath = "V:/Brettspiele/Project_Goettergaemmerung/Scripte/WhiteToPng/output/"
allrawCards = list.files(importPath)
allrawCards
i=4
ImportImage = readPNG(paste(importPath,allrawCards[i],sep=""))
i=3
ImportImage = readPNG(paste(importPath,allrawCards[i],sep=""))
allrawCards[i]
readPNG(paste(importPath,allrawCards[i],sep=""))
paste(importPath,allrawCards[i],sep="")
ImportImage = readPNG(paste(importPath,allrawCards[i],sep=""))
ImportImage
### reset
rm(list = ls())
cat("\014")
#install.packages("png")
#install.packages("abind")
library(png)
library(abind)
importPath = "V:/Brettspiele/Project_Goettergaemmerung/Scripte/WhiteToPng/input/"
exportPath = "V:/Brettspiele/Project_Goettergaemmerung/Scripte/WhiteToPng/output/"
allrawCards = list.files(importPath)
for (i in 1:length(allrawCards)){
ImportImage = readPNG(paste(importPath,allrawCards[i],sep=""))
transparentLayer = 1 - ((ImportImage[,,1] + ImportImage[,,2] + ImportImage[,,3]) / 3)
if (dim(ImportImage)[3] == 4){
ImportImage[,,4] = transparentLayer
ImportImage[,,1] = 1
ImportImage[,,2] = 1
ImportImage[,,3] = 1
TransImage = ImportImage
}else{
ImportImage[,,1] = 0
ImportImage[,,2] = 0
ImportImage[,,3] = 0
TransImage = abind(ImportImage, transparentLayer, along = 3)
}
writePNG(TransImage,paste(exportPath,allrawCards[i],sep=""))
print(paste(i, "/", length(allrawCards)))
}
### reset
rm(list = ls())
cat("\014")
#install.packages("png")
#install.packages("abind")
library(png)
library(abind)
importPath = "V:/Brettspiele/Project_Goettergaemmerung/Scripte/WhiteToPng/input/"
exportPath = "V:/Brettspiele/Project_Goettergaemmerung/Scripte/WhiteToPng/output/"
allrawCards = list.files(importPath)
for (i in 1:length(allrawCards)){
ImportImage = readPNG(paste(importPath, allrawCards[i], sep=""))
transparentLayer = 1 - (rowMeans(ImportImage[, , 1:3]) / 3)
if (dim(ImportImage)[3] == 4){
ImportImage[, , 4] = transparentLayer
ImportImage[, , 1:3] = 1
TransImage = ImportImage
}else{
ImportImage[, , 1:3] = 0
TransImage = abind(ImportImage, transparentLayer, along = 3)
}
writePNG(TransImage, paste(exportPath, allrawCards[i], sep=""))
print(paste(i, "/", length(allrawCards)))
}
### reset
rm(list = ls())
cat("\014")
#install.packages("png")
#install.packages("abind")
library(png)
library(abind)
importPath = "V:/Brettspiele/Project_Goettergaemmerung/Scripte/WhiteToPng/input/"
exportPath = "V:/Brettspiele/Project_Goettergaemmerung/Scripte/WhiteToPng/output/"
allrawCards = list.files(importPath)
for (i in 1:length(allrawCards)){
ImportImage = readPNG(paste(importPath, allrawCards[i], sep=""))
transparentLayer = 1 - (rowMeans(ImportImage[, , 1:3]) / 3)
if (dim(ImportImage)[3] == 4){
ImportImage[, , 4] = transparentLayer
ImportImage[, , 1:3] = 1
TransImage = ImportImage
}else{
ImportImage[, , 1:3] = 0
TransImage = abind(ImportImage, transparentLayer, along = 3)
}
writePNG(TransImage, paste(exportPath, allrawCards[i], sep=""))
print(paste(i, "/", length(allrawCards)))
}
